// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

enum UserRole {
  STUDENT
  TA
  INSTRUCTOR
  ADMIN
}

enum SubmissionType {
  TRADITIONAL_CODE // The Scribe - traditional programming
  SOLUTION_WALKTHROUGH // The Oracle - explain solution approach
  REVERSE_PROGRAMMING // The Sage - interpret existing code
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
}

enum NotificationType {
  ASSIGNMENT_DUE
  GRADE_POSTED
  COURSE_ANNOUNCEMENT
  SYSTEM_MESSAGE
}

model User {
  id            String    @id @default(cuid())

  // Auth0 fields
  auth0Id       String?   @unique  // Auth0 user ID (e.g., "google-oauth2|123456")

  // Profile fields
  name          String                    // Full name from Auth0/Google
  firstName     String?                   // Parsed from name or user input
  lastName      String?                   // Parsed from name or user input
  email         String    @unique         // Email from Auth0/Google
  emailVerified DateTime?                 // Email verification timestamp
  picture       String?                   // Profile picture URL from Auth0/Google
  bio           String?   @db.Text        // User bio/description (optional)
  phoneNumber   String?                   // Optional phone number

  // System fields
  role          UserRole  @default(STUDENT)
  isActive      Boolean   @default(true)  // For account suspension/soft delete
  lastLoginAt   DateTime?                 // Track last login timestamp
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  enrollments   Enrollment[]
  instructedCourses Course[] @relation("CourseInstructor")
  taCourses     CourseTA[] // TA assignments to courses
  submissions   Submission[]
  notifications Notification[]
  feedbackGiven Feedback[] @relation("FeedbackGiver")
  feedbackReceived Feedback[] @relation("FeedbackReceiver")
  announcementsAuthored Announcement[] @relation("AnnouncementAuthor")

  @@map("users")
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String?
  syllabus    String?   @db.Text // Course syllabus content
  tarotTheme  String?   // Mystical tarot card theme for the course
  code        String    @unique // Course code like "CS101"
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Instructor relationship
  instructorId String
  instructor   User      @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)

  // Relationships
  enrollments  Enrollment[]
  coursetas   CourseTA[] // TAs assigned to this course
  assignments  Assignment[]
  notifications Notification[]
  announcements Announcement[]

  @@map("courses")
}

model CourseTA {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("course_tas")
}

model Enrollment {
  id         String    @id @default(cuid())
  enrolledAt DateTime  @default(now())
  isActive   Boolean   @default(true)
  
  // Relationships
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model Assignment {
  id            String           @id @default(cuid())
  title         String
  description   String           @db.Text
  instructions  String           @db.Text // Detailed instructions
  dueDate       DateTime
  maxPoints     Int              @default(100)
  isActive      Boolean          @default(true)

  // Which submission types are allowed for this assignment
  allowedTypes  SubmissionType[]

  // For reverse programming assignments - provide the code to analyze
  providedCode  String?          @db.Text

  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relationships
  courseId      String
  course        Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions   Submission[]
  notifications Notification[]

  @@map("assignments")
}

model Submission {
  id              String           @id @default(cuid())
  type            SubmissionType
  status          SubmissionStatus @default(DRAFT)

  // Content based on submission type
  codeContent     String?          @db.Text // For TRADITIONAL_CODE
  walkthroughText String?          @db.Text // For SOLUTION_WALKTHROUGH
  codeExplanation String?          @db.Text // For REVERSE_PROGRAMMING

  // Metadata
  submittedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentId    String
  assignment      Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  feedback        Feedback[]
  notifications   Notification[]

  @@unique([userId, assignmentId])
  @@map("submissions")
}

model Feedback {
  id          String    @id @default(cuid())
  points      Int?      // Points earned (null if not graded yet)
  comments    String?   @db.Text // Written feedback
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  graderId     String    // The instructor or TA who gave the feedback
  grader       User      @relation("FeedbackGiver", fields: [graderId], references: [id])
  studentId    String    // The student receiving feedback
  student      User      @relation("FeedbackReceiver", fields: [studentId], references: [id])

  @@map("feedback")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String           @db.Text
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relationships
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String?          // Optional - for course-specific notifications
  course    Course?          @relation(fields: [courseId], references: [id], onDelete: SetNull)
  assignmentId String?       // For assignment-related notifications
  assignment   Assignment?   @relation(fields: [assignmentId], references: [id], onDelete: SetNull)
  submissionId String?       // For grade posted notifications
  submission   Submission?   @relation(fields: [submissionId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation("AnnouncementAuthor", fields: [authorId], references: [id])

  @@map("announcements")
}
